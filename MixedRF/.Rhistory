rf.US <- doRandomForest(dfObj$US, title='US')
# plot err rate per tree
#!# 23.08.23 not working
# rf.SK$model$err.rate
rf.SK$model
# plot err rate per tree
#!# 23.08.23 not working
# rf.SK$model$err.rate
rf.SK$model$err.rate
Loader <- function(sheetName, PV_num) {
if (Sys.info()['sysname'] == 'Darwin') {
data_path <- '/Users/huni/Proj/Research/MixedRF/data/preprocessing.xlsx'
} else {
# data_path <- sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\preprocessing%s.xlsx', PV_num) # labtop
data_path <- sprintf('C:\\Users\\jhun1\\Dev\\Research\\MixedRF\\rs\\preprocessing%s.xlsx', PV_num) # desktop
}
df <- read_excel(data_path, sheet=sheetName)
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
df_SK <- df[df$CNT=='Korea', ]
df_US <- df[df$CNT=='United States', ]
df_SK <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
df_US <- df_US[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
result <- list('SK' = df_SK, 'US'= df_US)
return(result)
}
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced', PV_num="10")
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title, idx=0) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))),
ntree = 5000,
na.action = na.roughfix,
importance=TRUE
)
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient)) # rs1. confusion matrix
png(filename = sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\rs\\%s_%s.png', title, idx)) #labtop
# png(filename = sprintf('C:\\Users\\jhun1\\Dev\\Research\\MixedRF\\rs\\%s_%s.png', title, idx)) # desktop
# varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
db.imp <- importance(rf, type=1)
df.imp <- data.frame(db.imp)
df.imp.descending <- df.imp %>% arrange(desc(MeanDecreaseAccuracy))
# df.imp.percentage <- df.imp.descending %>% mutate(Percentage=round(MeanDecreaseAccuracy/sum(MeanDecreaseAccuracy)*100,2))
print(df.imp.descending)
# plt <- ggplot(df.imp.percentage,
#               aes( x = reorder(rownames(df.imp.percentage), Percentage),
#                    y = Percentage
#                    )) +
#               geom_col() +
#               xlab("variable") +
#               coord_flip() +
#               ggtitle(sprintf("Variabel Importance Plot__%s", title))
#
# print(plt)
# dev.off()
# rs <- list('model'= rf, 'df.mda'= df.imp.percentage)
# return(rs)
}
# sample test
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
rf.US <- doRandomForest(dfObj$US, title='US')
# plot err rate per tree
#!# 23.08.23 not working
# rf.SK$model$err.rate
rf.SK$model$err.rate
# plot err rate per tree
#!# 23.08.23 not working
# rf.SK$model$err.rate
rf.SK$model
# plot err rate per tree
#!# 23.08.23 not working
rf.SK$model$err.rate
rf.SK$model
# plot err rate per tree
#!# 23.08.23 not working
# rf.SK$model$err.rate
# rf.SK$model
plot(rf.SK$model$err.rate[, 1])
View(rf.SK)
sessionInfo()
version
# sample test
dfObj$SK
# plot err rate per tree
#!# 23.08.23 not working
# rf.SK$model$err.rate
# rf.SK$model
plot(rf.SK$model$err.rate[, 1])
View(rf.SK)
doRandomForest <- function(inputDf, title, idx=0) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))),
ntree = 5000,
na.action = na.roughfix,
importance=TRUE
)
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient)) # rs1. confusion matrix
png(filename = sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\rs\\%s_%s.png', title, idx)) #labtop
# png(filename = sprintf('C:\\Users\\jhun1\\Dev\\Research\\MixedRF\\rs\\%s_%s.png', title, idx)) # desktop
# varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
db.imp <- importance(rf, type=1)
df.imp <- data.frame(db.imp)
df.imp.descending <- df.imp %>% arrange(desc(MeanDecreaseAccuracy))
# df.imp.percentage <- df.imp.descending %>% mutate(Percentage=round(MeanDecreaseAccuracy/sum(MeanDecreaseAccuracy)*100,2))
print(df.imp.descending)
# plt <- ggplot(df.imp.percentage,
#               aes( x = reorder(rownames(df.imp.percentage), Percentage),
#                    y = Percentage
#                    )) +
#               geom_col() +
#               xlab("variable") +
#               coord_flip() +
#               ggtitle(sprintf("Variabel Importance Plot__%s", title))
#
# print(plt)
# dev.off()
rs <- list('model'= rf, 'df.mda'= df.imp.percentage)
return(rs)
}
# sample test
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
doRandomForest <- function(inputDf, title, idx=0) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))),
ntree = 5000,
na.action = na.roughfix,
importance=TRUE
)
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient)) # rs1. confusion matrix
png(filename = sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\rs\\%s_%s.png', title, idx)) #labtop
# png(filename = sprintf('C:\\Users\\jhun1\\Dev\\Research\\MixedRF\\rs\\%s_%s.png', title, idx)) # desktop
# varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
db.imp <- importance(rf, type=1)
df.imp <- data.frame(db.imp)
df.imp.descending <- df.imp %>% arrange(desc(MeanDecreaseAccuracy))
# df.imp.percentage <- df.imp.descending %>% mutate(Percentage=round(MeanDecreaseAccuracy/sum(MeanDecreaseAccuracy)*100,2))
print(df.imp.descending)
# plt <- ggplot(df.imp.percentage,
#               aes( x = reorder(rownames(df.imp.percentage), Percentage),
#                    y = Percentage
#                    )) +
#               geom_col() +
#               xlab("variable") +
#               coord_flip() +
#               ggtitle(sprintf("Variabel Importance Plot__%s", title))
#
# print(plt)
# dev.off()
# rs <- list('model'= rf, 'df.mda'= df.imp.percentage)
# return(rs)
return(rf)
}
# sample test
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
# plot err rate per tree
#!# 23.08.23 not working
# rf.SK$model$err.rate
# rf.SK$model
plot(rf.SK$model$err.rate[, 1])
# plot err rate per tree
#!# 23.08.23 not working
rf.SK$model$err.rate
rf.SK$model
rf.SK$err.rate
plot(rf.SK$err.rate[, 1])
(rf.SK$err.rate[, 1])
plot(rf.SK$err.rate[, 1])
rf.SK$importance
doRandomForest <- function(inputDf, title, idx=0) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))),
ntree = 5000,
na.action = na.roughfix,
importance=TRUE
)
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient)) # rs1. confusion matrix
png(filename = sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\rs\\%s_%s.png', title, idx)) #labtop
# png(filename = sprintf('C:\\Users\\jhun1\\Dev\\Research\\MixedRF\\rs\\%s_%s.png', title, idx)) # desktop
# varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
db.imp <- importance(rf, type=1)
df.imp <- data.frame(db.imp)
df.imp.descending <- df.imp %>% arrange(desc(MeanDecreaseAccuracy))
df.imp.percentage <- df.imp.descending %>% mutate(Percentage=round(MeanDecreaseAccuracy/sum(MeanDecreaseAccuracy)*100,2))
print(df.imp.descending)
# plt <- ggplot(df.imp.percentage,
#               aes( x = reorder(rownames(df.imp.percentage), Percentage),
#                    y = Percentage
#                    )) +
#               geom_col() +
#               xlab("variable") +
#               coord_flip() +
#               ggtitle(sprintf("Variabel Importance Plot__%s", title))
#
# print(plt)
# dev.off()
rs <- list('model'= rf, 'df.mda'= df.imp.percentage)
return(rs)
# return(rf)
}
# sample test
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
# plot err rate per tree
#!# 23.08.23 not working
# rf.SK$model$err.rate
# rf.SK$model
# rf.SK$err.rate
# rf.SK$importance
# plot(rf.SK$err.rate[, 1])
plot(rf.SK$model$err.rate[, 1])
library(pdp)
# get top 10 variable
top10.SK <- topPredictors(rf.SK, n = 10)
top10.US <- topPredictors(rf.US, n = 10)
# get top 10 variable
top10.SK <- topPredictors(rf.SK$model, n = 10)
# get top 10 variable
top10.SK <- topPredictors(rf.SK$model$importance, n = 10)
# get top 10 variable
top10.SK <- topPredictors(rf.SK$df.mda$MeanDecreaseAccuracy, n = 10)
# get top 10 variable
top10.SK <- topPredictors(rf.SK$df.mda, n = 10)
# plot err rate per tree
#!# 23.08.23 not working
# rf.SK$model$err.rate
# rf.SK$model
# rf.SK$err.rate
# rf.SK$importance
# plot(rf.SK$err.rate[, 1])
plot(rf.SK$model$err.rate[, 1])
varImp(rf.SK)
# sample test
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
doRandomForest <- function(inputDf, title, idx=0) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))),
ntree = 5000,
na.action = na.roughfix,
importance=TRUE
)
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient)) # rs1. confusion matrix
png(filename = sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\rs\\%s_%s.png', title, idx)) #labtop
# png(filename = sprintf('C:\\Users\\jhun1\\Dev\\Research\\MixedRF\\rs\\%s_%s.png', title, idx)) # desktop
# varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
db.imp <- importance(rf, type=1)
df.imp <- data.frame(db.imp)
df.imp.descending <- df.imp %>% arrange(desc(MeanDecreaseAccuracy))
df.imp.percentage <- df.imp.descending %>% mutate(Percentage=round(MeanDecreaseAccuracy/sum(MeanDecreaseAccuracy)*100,2))
print(df.imp.descending)
plt <- ggplot(df.imp.percentage,
aes( x = reorder(rownames(df.imp.percentage), Percentage),
y = Percentage
)) +
geom_col() +
xlab("variable") +
coord_flip() +
ggtitle(sprintf("Variabel Importance Plot__%s", title))
print(plt)
dev.off()
rs <- list('model'= rf, 'df.mda'= df.imp.percentage)
return(rs)
# return(rf)
}
# sample test
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
# plot err rate per tree
#!# 23.08.23 not working
# rf.SK$model$err.rate
# rf.SK$model
# rf.SK$err.rate
# rf.SK$importance
# plot(rf.SK$err.rate[, 1])
plot(rf.SK$model$err.rate[, 1])
# plot err rate per tree
#!# 23.08.23 not working
rf.SK$model$err.rate
# rf.SK$model
# rf.SK$err.rate
# rf.SK$importance
# plot(rf.SK$err.rate[, 1])
plot(rf.SK$model$err.rate[, 1])
# plot err rate per tree
plot(rf.SK$model$err.rate[, 1])
plot(rf.SK$model)
importance(rf.SK$model)
varImpPlot(rf.SK$model,
sort = T,
n.var = 10,
main = "Top 10 - Variable Importance")
dev.off()
getOption("device")
plot(rf.SK$model$err.rate[, 1])
print(plot(1)) # Basically use print command once
print(plot(rf.SK$model$err.rate[, 1]))
dev.cur()
dev.off()
plot(rf.US$model$err.rate[, 1])
importance(rf.SK$model)
varImpPlot(rf.SK$model,
sort = T,
n.var = 10,
main = "Top 10 - Variable Importance")
install.packages(c("bit", "broom", "caret", "cli", "colorspace", "cpp11", "crayon", "data.table", "digest", "dplyr", "e1071", "fansi", "forcats", "future", "future.apply", "generics", "ggplot2", "globals", "gower", "gtable", "hardhat", "haven", "hms", "ipred", "isoband", "lava", "lifecycle", "listenv", "lubridate", "magrittr", "mice", "parallelly", "pillar", "plyr", "pROC", "prodlim", "progressr", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "recipes", "rlang", "scales", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "timeDate", "tzdb", "utf8", "vctrs", "viridisLite", "vroom"))
install.packages(c("bit", "broom", "caret", "cli", "colorspace", "cpp11", "crayon", "data.table", "digest", "dplyr", "e1071", "fansi", "forcats", "future", "future.apply", "generics", "ggplot2", "globals", "gower", "gtable", "hardhat", "haven", "hms", "ipred", "isoband", "lava", "lifecycle", "listenv", "lubridate", "magrittr", "mice", "parallelly", "pillar", "plyr", "pROC", "prodlim", "progressr", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "recipes", "rlang", "scales", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "timeDate", "tzdb", "utf8", "vctrs", "viridisLite", "vroom"))
install.packages(c("bit", "broom", "caret", "cli", "colorspace", "cpp11", "crayon", "data.table", "digest", "dplyr", "e1071", "fansi", "forcats", "future", "future.apply", "generics", "ggplot2", "globals", "gower", "gtable", "hardhat", "haven", "hms", "ipred", "isoband", "lava", "lifecycle", "listenv", "lubridate", "magrittr", "mice", "parallelly", "pillar", "plyr", "pROC", "prodlim", "progressr", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "recipes", "rlang", "scales", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "timeDate", "tzdb", "utf8", "vctrs", "viridisLite", "vroom"))
install.packages(c("bit", "broom", "caret", "cli", "colorspace", "cpp11", "crayon", "data.table", "digest", "dplyr", "e1071", "fansi", "forcats", "future", "future.apply", "generics", "ggplot2", "globals", "gower", "gtable", "hardhat", "haven", "hms", "ipred", "isoband", "lava", "lifecycle", "listenv", "lubridate", "magrittr", "mice", "parallelly", "pillar", "plyr", "pROC", "prodlim", "progressr", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "recipes", "rlang", "scales", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "timeDate", "tzdb", "utf8", "vctrs", "viridisLite", "vroom"))
library('haven')
library('readxl')
library('dplyr')
library('randomForest')
library('caTools')
library('caret')
library('ggplot2')
set.seed(41) # set random seed
###
# load and slicing data will be converted to function
###
Loader <- function(sheetName, PV_num) {
if (Sys.info()['sysname'] == 'Darwin') {
data_path <- '/Users/huni/Proj/Research/MixedRF/data/preprocessing.xlsx'
} else {
# data_path <- sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\preprocessing%s.xlsx', PV_num) # labtop
data_path <- sprintf('C:\\Users\\jhun1\\Dev\\Research\\MixedRF\\rs\\preprocessing%s.xlsx', PV_num) # desktop
}
df <- read_excel(data_path, sheet=sheetName)
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
df_SK <- df[df$CNT=='Korea', ]
df_US <- df[df$CNT=='United States', ]
df_SK <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
df_US <- df_US[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
result <- list('SK' = df_SK, 'US'= df_US)
return(result)
}
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced', PV_num="10")
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title, idx=0) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))),
ntree = 5000,
na.action = na.roughfix,
importance=TRUE
)
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient)) # rs1. confusion matrix
png(filename = sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\rs\\%s_%s.png', title, idx)) #labtop
# png(filename = sprintf('C:\\Users\\jhun1\\Dev\\Research\\MixedRF\\rs\\%s_%s.png', title, idx)) # desktop
varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
db.imp <- importance(rf, type=1)
df.imp <- data.frame(db.imp)
df.imp.descending <- df.imp %>% arrange(desc(MeanDecreaseAccuracy))
df.imp.percentage <- df.imp.descending %>% mutate(Percentage=round(MeanDecreaseAccuracy/sum(MeanDecreaseAccuracy)*100,2))
print(df.imp.descending)
rs <- list('model'= rf, 'df.mda'= df.imp.percentage)
return(rs) # data return as list, first element: randomForest model, seconde element: cleaned dataFrame
}
# sample test
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
rf.US <- doRandomForest(dfObj$US, title='US')
plot(rf.US$model$err.rate[, 1])
x = c(1,2,3)
y = c(2,3,6)
plot(x,y)
x = c(1,2,3)
y = c(2,3,6)
plot(x,y)
dev.off()
library('haven')
library('readxl')
library('dplyr')
library('randomForest')
library('caTools')
library('caret')
library('ggplot2')
set.seed(41) # set random seed
###
# load and slicing data will be converted to function
###
Loader <- function(sheetName, PV_num) {
if (Sys.info()['sysname'] == 'Darwin') {
data_path <- '/Users/huni/Proj/Research/MixedRF/data/preprocessing.xlsx'
} else {
# data_path <- sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\preprocessing%s.xlsx', PV_num) # labtop
data_path <- sprintf('C:\\Users\\jhun1\\Dev\\Research\\MixedRF\\rs\\preprocessing%s.xlsx', PV_num) # desktop
}
df <- read_excel(data_path, sheet=sheetName)
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
df_SK <- df[df$CNT=='Korea', ]
df_US <- df[df$CNT=='United States', ]
df_SK <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
df_US <- df_US[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
result <- list('SK' = df_SK, 'US'= df_US)
return(result)
}
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced', PV_num="10")
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title, idx=0) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))),
ntree = 5000,
na.action = na.roughfix,
importance=TRUE
)
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient)) # rs1. confusion matrix
png(filename = sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\rs\\%s_%s.png', title, idx)) #labtop
# png(filename = sprintf('C:\\Users\\jhun1\\Dev\\Research\\MixedRF\\rs\\%s_%s.png', title, idx)) # desktop
dev.off()
# varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
db.imp <- importance(rf, type=1)
df.imp <- data.frame(db.imp)
df.imp.descending <- df.imp %>% arrange(desc(MeanDecreaseAccuracy))
df.imp.percentage <- df.imp.descending %>% mutate(Percentage=round(MeanDecreaseAccuracy/sum(MeanDecreaseAccuracy)*100,2))
print(df.imp.descending)
rs <- list('model'= rf, 'df.mda'= df.imp.percentage)
return(rs) # data return as list, first element: randomForest model, seconde element: cleaned dataFrame
}
# sample test
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
rf.US <- doRandomForest(dfObj$US, title='US')
plot(rf.US$model$err.rate[, 1])
importance(rf.SK$model)
varImpPlot(rf.SK$model,
sort = T,
n.var = 10,
main = "Top 10 - Variable Importance")
x = c(1,2,3)
y = c(2,3,6)
plot(x,y)
library(pdp)
top10.US <- topPredictors(rf.US, n = 10)
# drawing pdp like subplot
# Construct partial dependence functions for top four predictors
pd <- NULL
for (i in top4) {
tmp <- partial(mtcars.rf, pred.var = i)
names(tmp) <- c("x", "y")
pd <- rbind(pd, cbind(tmp, predictor = i))
}
rf_loop <- function(data, title) {
for (x in 1:5) {
doRandomForest(inputDf= data, title=title, idx=x)
}
}
rf_loop(dfObj$SK, title='South Korea')
rf_loop(dfObj$US, title='United States')
