plot(x = rf.pred, y= df_test$resilient)
# cor.test #!# TBD
varImpPlot(rf, main=title)
importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
print(head(df_SK))
df.factor <- as.data.frame(unclass(df_SK), stringAsFactors = TRUE)
print(head(df.factor))
print(str(df.factor))
str(df.factor)
df.factor <- as.data.frame(unclass(df_SK), stringAsFactors = TRUE)
str(df.factor)
df_SK[sapply(df_SK, is.character)] <- lapply(df_SK[sapply(df_SK, is.character)],
as.factor)
str(df_SK)
df_SK <- df[df$CNT=='Korea', ]
df_SK <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
print(dim(df_SK))
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
test_idx <- -train_idx
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[test_idx, ]
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df.roughfix))), #!# it's categorical problem
ntree = 1000, #!# value should be checked
do.trace = TRUE
)
rf.pred <- predict(rf, newData = df_test)
rf.pred.train <- predict(rf, newData = df_train)
plot(x = rf.pred, y= df_test$resilient)
# cor.test #!# TBD
varImpPlot(rf, main=title)
importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
test_idx <- -train_idx
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[test_idx, ]
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df.roughfix))), #!# it's categorical problem
ntree = 1000, #!# value should be checked
# do.trace = TRUE # if set True, console window get dirty
)
rf.pred <- predict(rf, newData = df_test)
rf.pred.train <- predict(rf, newData = df_train)
plot(x = rf.pred, y= df_test$resilient)
# cor.test #!# TBD
varImpPlot(rf, main=title)
importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
test_idx <- -train_idx
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[test_idx, ]
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df.roughfix))), #!# it's categorical problem
ntree = 1000, #!# value should be checked
# do.trace = TRUE # if set True, console window get dirty
)
rf.pred <- predict(rf, newData = df_test)
print(rf.pred)
rf.pred.train <- predict(rf, newData = df_train)
plot(x = rf.pred, y= df_test$resilient)
# cor.test #!# TBD
varImpPlot(rf, main=title)
importance(rf)
}
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
test_idx <- -train_idx
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[test_idx, ]
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df.roughfix))), #!# it's categorical problem
ntree = 100, #!# value should be checked
# do.trace = TRUE # if set True, console window get dirty
)
rf.pred <- predict(rf, newData = df_test)
print(rf.pred)
rf.pred.train <- predict(rf, newData = df_train)
plot(x = rf.pred, y= df_test$resilient)
# cor.test #!# TBD
varImpPlot(rf, main=title)
importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
test_idx <- -train_idx
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[test_idx, ]
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df.roughfix))), #!# it's categorical problem
ntree = 100, #!# value should be checked
# do.trace = TRUE # if set True, console window get dirty
)
rf.pred <- predict(rf, newData = df_test)
print(length(rf.pred))
rf.pred.train <- predict(rf, newData = df_train)
plot(x = rf.pred, y= df_test$resilient)
# cor.test #!# TBD
varImpPlot(rf, main=title)
importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
test_idx <- -train_idx
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[test_idx, ]
print(dim(df_train))
print(dim(df_test))
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df.roughfix))), #!# it's categorical problem
ntree = 100, #!# value should be checked
# do.trace = TRUE # if set True, console window get dirty
)
rf.pred <- predict(rf, newData = df_test)
print(length(rf.pred))
rf.pred.train <- predict(rf, newData = df_train)
plot(x = rf.pred, y= df_test$resilient)
# cor.test #!# TBD
varImpPlot(rf, main=title)
importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
test_idx <- -train_idx
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[test_idx, ]
print(dim(df_train))
print(dim(df_test))
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df.roughfix))), # it's categorical problem
ntree = 100, #!# value should be checked
# do.trace = TRUE # if set True, console window get dirty
)
rf.pred <- predict(rf, newData = df_test, type='class')
print(length(rf.pred))
plot(x = rf.pred, y= df_test$resilient)
rf.pred.train <- predict(rf, newData = df_train)
# cor.test #!# TBD
varImpPlot(rf, main=title)
importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
test_idx <- -train_idx
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[test_idx, ]
print(dim(df_train))
print(dim(df_test))
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df.roughfix))), # it's categorical problem
ntree = 100, #!# value should be checked
# do.trace = TRUE # if set True, console window get dirty
)
pred <- predict(rf, newData = df_test, type='class')
print(length(pred))
plot(x = pred, y= df_test$resilient)
rf.pred.train <- predict(rf, newData = df_train)
# cor.test #!# TBD
varImpPlot(rf, main=title)
importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
test_idx <- -train_idx
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[test_idx, ]
print(dim(df_train))
print(dim(df_test))
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df.roughfix))), # it's categorical problem
ntree = 100, #!# value should be checked
# do.trace = TRUE # if set True, console window get dirty
)
pred <- predict(rf, newData = df_test, type='class')
print(length(pred))
plot(x = pred, y= df_test$resilient)
rf.pred.train <- predict(rf, newData = df_train)
# cor.test #!# TBD
varImpPlot(rf, main=title)
importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
test_idx <- -train_idx
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[test_idx, ]
print(dim(df_train))
print(dim(df_test))
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df.roughfix))), # it's categorical problem
ntree = 100, #!# value should be checked
# do.trace = TRUE # if set True, console window get dirty
)
pred <- predict(rf, newData = df_test, type='class')
# print(length(pred))
print(pred)
plot(x = pred, y= df_test$resilient)
rf.pred.train <- predict(rf, newData = df_train)
# cor.test #!# TBD
varImpPlot(rf, main=title)
importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
test_idx <- -train_idx
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[test_idx, ]
print(dim(df_train))
print(dim(df_test))
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df.roughfix))), # it's categorical problem
ntree = 100, #!# value should be checked
# do.trace = TRUE # if set True, console window get dirty
)
pred <- predict(rf, newData = df_test, type='class')
print(length(pred))
print(pred)
plot(x = pred, y= df_test$resilient)
rf.pred.train <- predict(rf, newData = df_train)
# cor.test #!# TBD
varImpPlot(rf, main=title)
importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
print(summary(df.roughfix))
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[-train_idx, ]
print(dim(df_train))
print(dim(df_test))
# rf <- randomForest(resilient ~.,
#                    data = df_train,
#                    mtry = floor(sqrt(ncol(df.roughfix))), # it's categorical problem
#                    ntree = 10, #!# value should be checked
#                    # do.trace = TRUE # if set True, console window get dirty
# )
# pred <- predict(rf, newData = df_test, type='class')
# print(length(pred))
# print(pred)
# plot(x = pred, y= df_test$resilient)
#
# rf.pred.train <- predict(rf, newData = df_train)
# cor.test #!# TBD
# varImpPlot(rf, main=title)
# importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
print(df)
df$resilient <- as.factor(df$resilient)
print(df)
df_SK <- df[df$CNT=='Korea', ]
df_US <- df[df$CNT=='United States', ]
df_SK <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
df_US <- df_US[-c(1,2,3)]
print('>> South Korea: ')
print(dim(df_SK))
print('>> United States: ')
print(dim(df_US))
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
print(summary(df.roughfix))
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[-train_idx, ]
print(dim(df_train))
print(dim(df_test))
# rf <- randomForest(resilient ~.,
#                    data = df_train,
#                    mtry = floor(sqrt(ncol(df.roughfix))), # it's categorical problem
#                    ntree = 10, #!# value should be checked
#                    # do.trace = TRUE # if set True, console window get dirty
# )
# pred <- predict(rf, newData = df_test, type='class')
# print(length(pred))
# print(pred)
# plot(x = pred, y= df_test$resilient)
#
# rf.pred.train <- predict(rf, newData = df_train)
# cor.test #!# TBD
# varImpPlot(rf, main=title)
# importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
print(summary(df.roughfix))
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[-train_idx, ]
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df.roughfix))), # it's categorical problem
ntree = 10, #!# value should be checked
# do.trace = TRUE # if set True, console window get dirty
)
pred <- predict(rf, newData = df_test, type='class')
print(length(pred))
print(pred)
plot(x = pred, y= df_test$resilient)
rf.pred.train <- predict(rf, newData = df_train)
# cor.test #!# TBD
# varImpPlot(rf, main=title)
# importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
print(summary(df.roughfix))
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[-train_idx, ]
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df.roughfix))), # it's categorical problem
ntree = 10, #!# value should be checked
# do.trace = TRUE # if set True, console window get dirty
)
pred <- predict(rf, newData = df_test, type='class')
print(length(pred))
# print(pred)
plot(x = pred, y= df_test$resilient)
rf.pred.train <- predict(rf, newData = df_train)
# cor.test #!# TBD
# varImpPlot(rf, main=title)
# importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
print(summary(df.roughfix))
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[-train_idx, ]
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))), # it's categorical problem
ntree = 10, #!# value should be checked
# do.trace = TRUE # if set True, console window get dirty
)
pred <- predict(rf, newData = df_test, type='class')
print(length(pred))
# print(pred)
plot(x = pred, y= df_test$resilient)
rf.pred.train <- predict(rf, newData = df_train)
# cor.test #!# TBD
# varImpPlot(rf, main=title)
# importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
# print(summary(df.roughfix))
train_idx <- sample(1:nrow(df.roughfix), size=0.7*nrow(df.roughfix), replace=F)
df_train <- df.roughfix[train_idx, ]
df_test <- df.roughfix[-train_idx, ]
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))), # it's categorical problem
ntree = 10, #!# value should be checked
# do.trace = TRUE # if set True, console window get dirty
)
pred <- predict(rf, newData = df_test, type='class')
print(length(pred))
# print(pred)
plot(x = pred, y= df_test$resilient)
rf.pred.train <- predict(rf, newData = df_train)
# cor.test #!# TBD
# varImpPlot(rf, main=title)
# importance(rf)
}
# doRandomForest(df, title='full data')
doRandomForest(df_SK, title='south korea')
