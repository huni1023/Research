doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(inputDf$resilient, SplitRatio = .7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~., data = df_train, mtry = floor(sqrt(ncol(df_train))), ntree = 1000)
# do.trace = TRUE # if set True, console window get dirty
#!# pred <- predict(object = rf, newData = df_test) # it occurs error
pred <- predict(rf, df_test, type="class")
confusionMatrix(pred, df_test$resilient)
varImpPlot(rf, main=title)
# importance(rf)
}
doRandomForest(df_SK, title='south korea')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(inputDf$resilient, SplitRatio = .7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~., data = df_train, mtry = floor(sqrt(ncol(df_train))), ntree = 10)
# do.trace = TRUE # if set True, console window get dirty
#!# pred <- predict(object = rf, newData = df_test) # it occurs error
pred <- predict(rf, df_test, type="class")
confusionMatrix(pred, df_test$resilient)
varImpPlot(rf, main=title)
# importance(rf)
}
doRandomForest(df_SK, title='south korea')
###
# Start Random Forest
####
dev.off()
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(inputDf$resilient, SplitRatio = .7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~., data = df_train, mtry = floor(sqrt(ncol(df_train))), ntree = 10)
# do.trace = TRUE # if set True, console window get dirty
#!# pred <- predict(object = rf, newData = df_test) # it occurs error
pred <- predict(rf, df_test, type="class")
confusionMatrix(pred, df_test$resilient)
varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
# importance(rf)
}
doRandomForest(df_SK, title='south korea')
df_SK <- df[df$CNT=='Korea', ]
df_US <- df[df$CNT=='United States', ]
df_SK <- df[df$CNT=='Korea', ]
summary(df_SK)
###
# load and slicing data will be converted to function
###
df <- read_excel('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\preprocessing.xlsx', sheet='full')
df$resilient <- as.factor(df$resilient)
df <- df[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
df <- subset(df, select=-c("ESCS"))
df_SK <- df[df$CNT=='Korea', ]
df_US <- df[df$CNT=='United States', ]
print(dim(df_SK))
###
# load and slicing data will be converted to function
###
df <- read_excel('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\preprocessing.xlsx', sheet='full')
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c("ESCS"))
df_SK <- df[df$CNT=='Korea', ]
df_US <- df[df$CNT=='United States', ]
df_SK <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
df_US <- df_US[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
print(dim(df_SK))
print(dim(df_US))
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(inputDf$resilient, SplitRatio = .7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~., data = df_train, mtry = floor(sqrt(ncol(df_train))), ntree = 10)
# do.trace = TRUE # if set True, console window get dirty
#!# pred <- predict(object = rf, newData = df_test) # it occurs error
pred <- predict(rf, df_test, type="class")
confusionMatrix(pred, df_test$resilient)
varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
# importance(rf)
}
doRandomForest(df_SK, title='south korea')
summary(df)
df <- df[-c("ESCS")]
###
# load and slicing data will be converted to function
###
df <- read_excel('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\preprocessing.xlsx', sheet='full')
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(inputDf$resilient, SplitRatio = .7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~., data = df_train, mtry = floor(sqrt(ncol(df_train))), ntree = 10)
# do.trace = TRUE # if set True, console window get dirty
#!# pred <- predict(object = rf, newData = df_test) # it occurs error
pred <- predict(rf, df_test, type="class")
confusionMatrix(pred, df_test$resilient)
varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
# importance(rf)
}
doRandomForest(df_SK, title='south korea')
###
# load and slicing data will be converted to function
###
df <- read_excel('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\preprocessing.xlsx', sheet='full')
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
df_SK <- df[df$CNT=='Korea', ]
df_US <- df[df$CNT=='United States', ]
df_SK <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
df_US <- df_US[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
print(dim(df_SK))
print(dim(df_US))
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(inputDf$resilient, SplitRatio = .7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~., data = df_train, mtry = floor(sqrt(ncol(df_train))), ntree = 10)
# do.trace = TRUE # if set True, console window get dirty
#!# pred <- predict(object = rf, newData = df_test) # it occurs error
pred <- predict(rf, df_test, type="class")
confusionMatrix(pred, df_test$resilient)
varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
# importance(rf)
}
doRandomForest(df_SK, title='south korea')
doRandomForest(df_US, title='us')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(inputDf$resilient, SplitRatio = .7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~., data = df_train, mtry = floor(sqrt(ncol(df_train))), ntree = 500)
# do.trace = TRUE # if set True, console window get dirty
#!# pred <- predict(object = rf, newData = df_test) # it occurs error
pred <- predict(rf, df_test, type="class")
confusionMatrix(pred, df_test$resilient)
varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
# importance(rf)
}
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(inputDf$resilient, SplitRatio = .7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~., data = df_train, mtry = floor(sqrt(ncol(df_train))), ntree = 500)
# do.trace = TRUE # if set True, console window get dirty
#!# pred <- predict(object = rf, newData = df_test) # it occurs error
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient))
varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
# importance(rf)
}
doRandomForest(df_SK, title='South Korea')
doRandomForest(df_US, title='US')
library('haven')
library('readxl')
library('dplyr')
library('randomForest')
library('caTools')
library('caret')
set.seed(41) # set random seed
# NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
###
# load and slicing data will be converted to function
###
Loader <- function(sheetName) {
if (Sys.info()['sysname'] == 'Darwin') {
data_path <- '/Users/huni/Proj/Research/MixedRF/data/preprocessing.xlsx'
} else {
data_path <- 'C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\preprocessing.xlsx'
}
df <- read_excel(data_path, sheet=sheetName)
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
df_SK <- df[df$CNT=='Korea', ]
df_US <- df[df$CNT=='United States', ]
df_SK <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
df_US <- df_US[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
result <- list('SK' = df_SK, 'US'= df_US)
return(result)
}
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
# print(summary(df.roughfix))
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~., data = df_train, mtry = floor(sqrt(ncol(df_train))), ntree = 500)
#!# pred <- predict(object = rf, newData = df_test) # it occurs error
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient))
varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
}
doRandomForest(dfObj$SK, title='South Korea')
doRandomForest(dfObj$US, title='US')
ed(41) # set random seed
# NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
###
# load and slicing data will be converted to function
###
Loader <- function(sheetName) {
if (Sys.info()['sysname'] == 'Darwin') {
data_path <- '/Users/huni/Proj/Research/MixedRF/data/preprocessing.xlsx'
} else {
data_path <- 'C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\preprocessing.xlsx'
}
df <- read_excel(data_path, sheet=sheetName)
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
df_SK <- df[df$CNT=='Korea', ]
df_US <- df[df$CNT=='United States', ]
df_SK <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
df_US <- df_US[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
result <- list('SK' = df_SK, 'US'= df_US)
return(result)
}
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
# print(summary(df.roughfix))
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~., data = df_train, mtry = floor(sqrt(ncol(df_train))), ntree = 500)
#!# pred <- predict(object = rf, newData = df_test) # it occurs error
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient))
varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
}
doRandomForest(dfObj$SK, title='South Korea')
doRandomForest(dfObj$US, title='US')
library('readxl')
library('dplyr')
library('randomForest')
library('caTools')
library('caret')
set.seed(41) # set random seed
# NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
###
# load and slicing data will be converted to function
###
Loader <- function() {
if (Sys.info()['sysname'] == 'Darwin') {
data_path <- '/Users/huni/Proj/Research/MixedRF/data/imputed_HK_c.xlsx'
} else {
data_path <- 'C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\imputed_HK_c.xlsx'
}
df <- read_excel(data_path)
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
df <- df[df$CNT=='Korea', ]
# df <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
result <- list('HK' = df)
return(result)
}
dfObj = Loader()
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
# print(summary(df.roughfix))
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~., data = df_train, mtry = floor(sqrt(ncol(df_train))), ntree = 500)
#!# pred <- predict(object = rf, newData = df_test) # it occurs error
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient))
varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
}
doRandomForest(dfObj$HK, tit
function() {
if (Sys.info()['sysname'] == 'Darwin') {
data_path <- '/Users/huni/Proj/Research/MixedRF/data/imputed_HK_c.xlsx'
} else {
data_path <- 'C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\imputed_HK_c.xlsx'
}
df <- read_excel(data_path)
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
# df <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
result <- list('HK' = df)
return(result)
}
dfObj = Loader()
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
# print(summary(df.roughfix))
=
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~., data = df_train, mtry = floor(sqrt(ncol(df_train))), ntree = 500)
#!# pred <- predict(object = rf, newData = df_test) # it occurs error
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient))
varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
}
=
doRandomForest(dfObj$HK, title='Hong Kong')
- function() {
if (Sys.info()['sysname'] == 'Darwin') {
data_path <- '/Users/huni/Proj/Research/MixedRF/data/imputed_HK_c.xlsx'
} else {
data_path <- 'C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\imputed_HK_c.xlsx'
}
df <- read_excel(data_path)
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
# df <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
result <- list('HK' = df)
return(result)
}
dfObj = Loa
Loader <- function() {
if (Sys.info()['sysname'] == 'Darwin') {
data_path <- '/Users/huni/Proj/Research/MixedRF/data/imputed_HK_c.xlsx'
} else {
data_path <- 'C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\imputed_HK_c.xlsx'
}
df <- read_excel(data_path)
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
# df <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
result <- list('HK' = df)
return(result)
}
dfObj = Loader()
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
# print(summary(df.roughfix))
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~., data = df_train, mtry = floor(sqrt(ncol(df_train))), ntree = 500)
#!# pred <- predict(object = rf, newData = df_test) # it occurs error
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient))
varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
}
doRandomForest(dfObj$HK, title='Hong Kong')
library('readxl')
library('dplyr')
library('randomForest')
library('caTools')
library('caret')
set.seed(41) # set random seed
# NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
###
# load and slicing data will be converted to function
###
Loader <- function(sheetName) {
if (Sys.info()['sysname'] == 'Darwin') {
data_path <- '/Users/huni/Proj/Research/MixedRF/data/preprocessing.xlsx'
} else {
data_path <- 'C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\preprocessing.xlsx'
}
df <- read_excel(data_path, sheet=sheetName)
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
df_SK <- df[df$CNT=='Korea', ]
df_US <- df[df$CNT=='United States', ]
df_SK <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
df_US <- df_US[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
result <- list('SK' = df_SK, 'US'= df_US)
return(result)
}
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
# print(summary(df.roughfix))
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~., data = df_train, mtry = floor(sqrt(ncol(df_train))), ntree = 500)
#!# pred <- predict(object = rf, newData = df_test) # it occurs error
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient))
varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
}
doRandomForest(dfObj$SK, title='South Korea')
doRandomForest(dfObj$US, title='US')
('haven')
library('readxl')
library('dplyr')
library('randomForest')
library('caTools')
library('caret')
set.seed(41) # set random seed
# NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
###
# load and slicing data will be converted to function
###
Loader <- function(sheetName) {
if (Sys.info()['sysname'] == 'Darwin') {
data_path <- '/Users/huni/Proj/Research/MixedRF/data/preprocessing.xlsx'
} else {
data_path <- 'C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\preprocessing.xlsx'
}
df <- read_excel(data_path, sheet=sheetName)
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
df_SK <- df[df$CNT=='Korea', ]
df_US <- df[df$CNT=='United States', ]
df_SK <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
df_US <- df_US[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
result <- list('SK' = df_SK, 'US'= df_US)
return(result)
}
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
# print(summary(df.roughfix))
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~., data = df_train, mtry = floor(sqrt(ncol(df_train))), ntree = 1000)
#!# pred <- predict(object = rf, newData = df_test) # it occurs error
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient))
varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
}
doRandomForest(dfObj$SK, title='South Korea')
doRandomForest(dfObj$US, title='US')
