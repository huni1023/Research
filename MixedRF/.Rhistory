library('caTools')
library('caret')
library('ggplot2')
set.seed(41) # set random seed
# NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
###
# load and slicing data will be converted to function
###
Loader <- function(sheetName) {
if (Sys.info()['sysname'] == 'Darwin') {
data_path <- '/Users/huni/Proj/Research/MixedRF/data/preprocessing.xlsx'
} else {
data_path <- 'C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\preprocessing.xlsx'
}
df <- read_excel(data_path, sheet=sheetName)
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
df_SK <- df[df$CNT=='Korea', ]
df_US <- df[df$CNT=='United States', ]
df_SK <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
df_US <- df_US[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
result <- list('SK' = df_SK, 'US'= df_US)
return(result)
}
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))),
ntree = 5000,
na.action = na.roughfix,
importance=TRUE
)
#!# pred <- predict(object = rf, newData = df_test) # it occurs error
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient)) # rs1. confusion matrix
png(filename = sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\%s.png', title))
# varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
db.imp <- importance(rf, type=1)
df.imp <- data.frame(db.imp)
# print(df.imp)
df.imp.descending <- df.imp %>% arrange(desc(MeanDecreaseAccuracy))
df.imp.percentage <- df.imp.descending %>% mutate(Percentage=round(MeanDecreaseAccuracy/sum(MeanDecreaseAccuracy)*100,2))
# print(df.imp.percentage)
plt <- ggplot(df.imp.percentage,
aes( x = reorder(rownames(df.imp.percentage), Percentage),
y = Percentage
)) +
geom_col() +
xlab("variable") +
coord_flip() +
ggtitle(sprintf("Variabel Importance Plot__%s", title))
# print(plt)
dev.off()
rs <- list('model'= rf, 'df.mda'= df.imp.percentage)
return(rs)
}
rf_loop <- function(data, title) {
for (x in 1:5) {
doRandomForest(data, title=title)
}
}
rf_loop(dfObj$Sk, title='South Korea')
rf_loop <- function(data, title) {
for (x in 1:5) {
doRandomForest(inputDf= data, title=title)
}
}
rf_loop(dfObj$Sk, title='South Korea')
# sample test
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
doRandomForest <- function(inputDf, title, idx=0) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))),
ntree = 100,
na.action = na.roughfix,
importance=TRUE
)
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient)) # rs1. confusion matrix
png(filename = sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\%s_%s.png', title, idx))
# varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
db.imp <- importance(rf, type=1)
df.imp <- data.frame(db.imp)
df.imp.descending <- df.imp %>% arrange(desc(MeanDecreaseAccuracy))
df.imp.percentage <- df.imp.descending %>% mutate(Percentage=round(MeanDecreaseAccuracy/sum(MeanDecreaseAccuracy)*100,2))
# print(df.imp.percentage)
plt <- ggplot(df.imp.percentage,
aes( x = reorder(rownames(df.imp.percentage), Percentage),
y = Percentage
)) +
geom_col() +
xlab("variable") +
coord_flip() +
ggtitle(sprintf("Variabel Importance Plot__%s", title))
# print(plt)
dev.off()
rs <- list('model'= rf, 'df.mda'= df.imp.percentage)
return(rs)
}
rf_loop <- function(data, title) {
for (x in 1:5) {
doRandomForest(inputDf= data, title=title, idx=x)
}
}
rf_loop(dfObj$Sk, title='South Korea')
rf_loop(dfObj$SK, title='South Korea')
library('haven')
library('readxl')
library('dplyr')
library('randomForest')
library('caTools')
library('caret')
library('ggplot2')
set.seed(41) # set random seed
# NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
###
# load and slicing data will be converted to function
###
Loader <- function(sheetName) {
if (Sys.info()['sysname'] == 'Darwin') {
data_path <- '/Users/huni/Proj/Research/MixedRF/data/preprocessing.xlsx'
} else {
data_path <- 'C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\preprocessing.xlsx'
}
df <- read_excel(data_path, sheet=sheetName)
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
df_SK <- df[df$CNT=='Korea', ]
df_US <- df[df$CNT=='United States', ]
df_SK <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
df_US <- df_US[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
result <- list('SK' = df_SK, 'US'= df_US)
return(result)
}
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title, idx=0) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))),
ntree = 5000,
na.action = na.roughfix,
importance=TRUE
)
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient)) # rs1. confusion matrix
png(filename = sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\%s_%s.png', title, idx))
# varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
db.imp <- importance(rf, type=1)
df.imp <- data.frame(db.imp)
df.imp.descending <- df.imp %>% arrange(desc(MeanDecreaseAccuracy))
df.imp.percentage <- df.imp.descending %>% mutate(Percentage=round(MeanDecreaseAccuracy/sum(MeanDecreaseAccuracy)*100,2))
# print(df.imp.percentage)
plt <- ggplot(df.imp.percentage,
aes( x = reorder(rownames(df.imp.percentage), Percentage),
y = Percentage
)) +
geom_col() +
xlab("variable") +
coord_flip() +
ggtitle(sprintf("Variabel Importance Plot__%s", title))
# print(plt)
dev.off()
rs <- list('model'= rf, 'df.mda'= df.imp.percentage)
return(rs)
}
rf_loop <- function(data, title) {
for (x in 1:5) {
doRandomForest(inputDf= data, title=title, idx=x)
}
}
rf_loop(dfObj$SK, title='South Korea')
doRandomForest <- function(inputDf, title, idx=0) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))),
ntree = 5000,
na.action = na.roughfix,
importance=TRUE
)
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient)) # rs1. confusion matrix
png(filename = sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\%s_%s.png', title, idx))
# varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
db.imp <- importance(rf, type=1)
df.imp <- data.frame(db.imp)
df.imp.descending <- df.imp %>% arrange(desc(MeanDecreaseAccuracy))
df.imp.percentage <- df.imp.descending %>% mutate(Percentage=round(MeanDecreaseAccuracy/sum(MeanDecreaseAccuracy)*100,2))
# print(df.imp.percentage)
plt <- ggplot(df.imp.percentage,
aes( x = reorder(rownames(df.imp.percentage), Percentage),
y = Percentage
)) +
geom_col() +
xlab("variable") +
coord_flip() +
ggtitle(sprintf("Variabel Importance Plot__%s", title))
print(plt)
dev.off()
rs <- list('model'= rf, 'df.mda'= df.imp.percentage)
return(rs)
}
rf_loop(dfObj$SK, title='South Korea')
doRandomForest <- function(inputDf, title, idx=0) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))),
ntree = 5000,
na.action = na.roughfix,
importance=TRUE
)
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient)) # rs1. confusion matrix
png(filename = sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\%s_%s.png', title, idx))
# varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
db.imp <- importance(rf, type=1)
df.imp <- data.frame(db.imp)
df.imp.descending <- df.imp %>% arrange(desc(MeanDecreaseAccuracy))
df.imp.percentage <- df.imp.descending %>% mutate(Percentage=round(MeanDecreaseAccuracy/sum(MeanDecreaseAccuracy)*100,2))
print(df.imp.percentage)
plt <- ggplot(df.imp.percentage,
aes( x = reorder(rownames(df.imp.percentage), Percentage),
y = Percentage
)) +
geom_col() +
xlab("variable") +
coord_flip() +
ggtitle(sprintf("Variabel Importance Plot__%s", title))
print(plt)
dev.off()
rs <- list('model'= rf, 'df.mda'= df.imp.percentage)
return(rs)
}
rf_loop(dfObj$SK, title='South Korea')
# sample test
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
# plot err rate per tree
plot(rf.SK$model$err.rate[, 1])
rf_loop(dfObj$US, title='United States')
library('haven')
library('readxl')
library('dplyr')
library('randomForest')
library('caTools')
library('caret')
library('ggplot2')
set.seed(41) # set random seed
# NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
###
# load and slicing data will be converted to function
###
Loader <- function(sheetName) {
if (Sys.info()['sysname'] == 'Darwin') {
data_path <- '/Users/huni/Proj/Research/MixedRF/data/preprocessing.xlsx'
} else {
data_path <- 'C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\preprocessing.xlsx'
}
df <- read_excel(data_path, sheet=sheetName)
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
df_SK <- df[df$CNT=='Korea', ]
df_US <- df[df$CNT=='United States', ]
df_SK <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
df_US <- df_US[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
result <- list('SK' = df_SK, 'US'= df_US)
return(result)
}
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced')
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title, idx=0) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))),
ntree = 5000,
na.action = na.roughfix,
importance=TRUE
)
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient)) # rs1. confusion matrix
png(filename = sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\%s_%s.png', title, idx))
# varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
db.imp <- importance(rf, type=1)
df.imp <- data.frame(db.imp)
df.imp.descending <- df.imp %>% arrange(desc(MeanDecreaseAccuracy))
df.imp.percentage <- df.imp.descending %>% mutate(Percentage=round(MeanDecreaseAccuracy/sum(MeanDecreaseAccuracy)*100,2))
print(df.imp.percentage)
plt <- ggplot(df.imp.percentage,
aes( x = reorder(rownames(df.imp.percentage), Percentage),
y = Percentage
)) +
geom_col() +
xlab("variable") +
coord_flip() +
ggtitle(sprintf("Variabel Importance Plot__%s", title))
print(plt)
dev.off()
rs <- list('model'= rf, 'df.mda'= df.imp.percentage)
return(rs)
}
rf_loop <- function(data, title) {
for (x in 1:5) {
doRandomForest(inputDf= data, title=title, idx=x)
}
}
rf_loop(dfObj$US, title='United States')
rf.US <- doRandomForest(dfObj$US, title='US')
View(rf.SK)
plot(rf.US$model$err.rate[, 1])
library('haven')
library('readxl')
library('dplyr')
library('randomForest')
library('caTools')
library('caret')
library('ggplot2')
set.seed(41) # set random seed
# NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
###
# load and slicing data will be converted to function
###
Loader <- function(sheetName, PV_num) {
if (Sys.info()['sysname'] == 'Darwin') {
data_path <- '/Users/huni/Proj/Research/MixedRF/data/preprocessing.xlsx'
} else {
data_path <- sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\preprocessing%s.xlsx', PV_num)
}
df <- read_excel(data_path, sheet=sheetName)
df$resilient <- as.factor(df$resilient)
df <- subset(df, select=-c(ESCS))
summary(df)
df_SK <- df[df$CNT=='Korea', ]
df_US <- df[df$CNT=='United States', ]
df_SK <- df_SK[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
df_US <- df_US[-c(1,2,3)] # CNT, CNTSCHID, CNTSTUID
result <- list('SK' = df_SK, 'US'= df_US)
return(result)
}
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced', PV_num="1")
###
# Start Random Forest
####
doRandomForest <- function(inputDf, title, idx=0) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))),
ntree = 5000,
na.action = na.roughfix,
importance=TRUE
)
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient)) # rs1. confusion matrix
png(filename = sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\%s_%s.png', title, idx))
# varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
db.imp <- importance(rf, type=1)
df.imp <- data.frame(db.imp)
# df.imp.descending <- df.imp %>% arrange(desc(MeanDecreaseAccuracy))
# df.imp.percentage <- df.imp.descending %>% mutate(Percentage=round(MeanDecreaseAccuracy/sum(MeanDecreaseAccuracy)*100,2))
# print(df.imp.percentage)
print(df.imp)
# plt <- ggplot(df.imp.percentage,
#               aes( x = reorder(rownames(df.imp.percentage), Percentage),
#                    y = Percentage
#                    )) +
#               geom_col() +
#               xlab("variable") +
#               coord_flip() +
#               ggtitle(sprintf("Variabel Importance Plot__%s", title))
#
# print(plt)
# dev.off()
# rs <- list('model'= rf, 'df.mda'= df.imp.percentage)
return(rs)
}
# sample test
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
doRandomForest <- function(inputDf, title, idx=0) {
inputDf[sapply(inputDf, is.character)] <- lapply(inputDf[sapply(inputDf, is.character)],
as.factor)
df.roughfix <- na.roughfix(inputDf)
sample = sample.split(df.roughfix$resilient, SplitRatio = 0.7)
df_train = subset(df.roughfix, sample == TRUE)
df_test  = subset(df.roughfix, sample == FALSE)
rf <- randomForest(resilient ~.,
data = df_train,
mtry = floor(sqrt(ncol(df_train))),
ntree = 5000,
na.action = na.roughfix,
importance=TRUE
)
pred <- predict(rf, df_test, type="class")
print(confusionMatrix(pred, df_test$resilient)) # rs1. confusion matrix
png(filename = sprintf('C:\\Users\\jhun1\\Proj\\Research\\MixedRF\\data\\%s_%s.png', title, idx))
# varImpPlot(rf, main=title, mar = c(1, 1, 1, 1))
db.imp <- importance(rf, type=1)
df.imp <- data.frame(db.imp)
df.imp.descending <- df.imp %>% arrange(desc(MeanDecreaseAccuracy))
# df.imp.percentage <- df.imp.descending %>% mutate(Percentage=round(MeanDecreaseAccuracy/sum(MeanDecreaseAccuracy)*100,2))
# print(df.imp.percentage)
print(df.imp.descending)
# plt <- ggplot(df.imp.percentage,
#               aes( x = reorder(rownames(df.imp.percentage), Percentage),
#                    y = Percentage
#                    )) +
#               geom_col() +
#               xlab("variable") +
#               coord_flip() +
#               ggtitle(sprintf("Variabel Importance Plot__%s", title))
#
# print(plt)
# dev.off()
# rs <- list('model'= rf, 'df.mda'= df.imp.percentage)
# return(rs)
}
# sample test
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
rf.US <- doRandomForest(dfObj$US, title='US')
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced', PV_num="2")
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
rf.US <- doRandomForest(dfObj$US, title='US')
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced', PV_num="3")
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
rf.US <- doRandomForest(dfObj$US, title='US')
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced', PV_num="4")
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
rf.US <- doRandomForest(dfObj$US, title='US')
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced', PV_num="5")
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
rf.US <- doRandomForest(dfObj$US, title='US')
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced', PV_num="6")
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
rf.US <- doRandomForest(dfObj$US, title='US')
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced', PV_num="7")
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
rf.US <- doRandomForest(dfObj$US, title='US')
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced', PV_num="8")
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
rf.US <- doRandomForest(dfObj$US, title='US')
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced', PV_num="9")
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
rf.US <- doRandomForest(dfObj$US, title='US')
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced', PV_num="11")
# dfObj = Loader(sheetName = 'full')
dfObj = Loader(sheetName = 'sliced', PV_num="10")
rf.SK <- doRandomForest(dfObj$SK, title='South Korea')
rf.US <- doRandomForest(dfObj$US, title='US')
